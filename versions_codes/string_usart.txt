#![no_std]
#![no_main]
#![feature(abi_avr_interrupt)] // Activate experimental features

use panic_halt as _;
use avr_device::interrupt;

mod atmega_328p_ports;
use crate::atmega_328p_ports::*;

const PB7: u8 = 7;
const PB6: u8 = 6;

#[avr_device::entry]
fn main() -> ! {
    config_timer();
    config_uart0();
    loop {
        unsafe {
            PORTB.write(PORTB.read() | (1 << PB7));
        }
        for _k in 0..10_000 {
            avr_device::asm::nop();
        }
        unsafe {
            PORTB.write(PORTB.read() & !(1 << PB7));
        }
        for _k in 0..10_000 {
            avr_device::asm::nop();
        }
    }
}

fn config_timer() {
    unsafe {
        DDRB.write(0xFF); // PortB as OUTPUT
        TCCR1A.write(0);  // Timer mode
        TCCR1B.write(2);  // Prescaler
        TIMSK1.write(1);  // OVF_Interruption
        TCNT1.write(55535);
        interrupt::enable(); // Enable global interrupts
    }
}

fn config_uart0() {
    unsafe {
        UBRR0.write(51); // Baud rate 9600
        UCSR0C.write(6); // 8 data bits, 1 stop bit
        UCSR0B.write(0x18); // Enable TX and RX
    }
}

// Interrupt handler
#[interrupt(atmega328p)]
fn TIMER1_OVF() {
    let message = b"hello world\r\n"; // Message to send, including newline
    unsafe {
        PORTB.write(PORTB.read() ^ (1 << PB6)); // Toggle PB6
        for &byte in message {
            UDR0.write(byte); // Write each byte to the UART data register
            for _k in 0..1000 {
                avr_device::asm::nop();
            }
        }
    }
}



